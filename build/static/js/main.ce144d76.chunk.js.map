{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/Header/Header.jsx","components/AddLog/AddLog.jsx","components/LogCard/LogCard.jsx","components/Loader/Loader.jsx","components/LogGallery/LogGallery.jsx","utils/logApi.js","pages/Feed/Feed.jsx","components/Profile/Profile.jsx","pages/Profile/Profile.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","tokenService","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","userService","signup","fetch","method","body","then","res","ok","json","response","console","log","Error","getUser","logout","login","creds","headers","Headers","stringify","getProfile","username","Authorization","isPasswordMatch","passwordOne","passwordConf","SignUpPage","useState","message","passwordError","setError","email","password","state","setState","selectedFile","setSelectedFile","navigate","useNavigate","handleChange","e","target","name","value","a","preventDefault","key","formData","FormData","append","forEach","item","handleSignUpOrLogin","Grid","textAlign","style","height","width","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","Field","files","Button","fluid","size","Message","to","LoginPage","PageHeader","loggedUser","handleLogout","clearing","floated","Icon","onClick","photoUrl","avatar","AddLog","journal","autoComplete","handleAddPost","LogCard","isProfile","Card","raised","Content","wrapped","ui","Description","_id","Loading","Loader","active","LogGallery","logs","numPhotosCol","loading","Group","itemsPerRow","stackable","Dimmer","inverted","map","create","err","getAll","Feed","setLogs","setLoading","logsAPI","data","useEffect","getLogs","centered","Row","handleAddLog","Profile","columns","vertical","ProfilePage","profileUser","setProfileUser","useParams","useCallback","posts","App","setUser","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ce144d76.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n  if (token) {\n    // localStorage is given to us by the browser\n    localStorage.setItem('token', token);\n  } else {\n    localStorage.removeItem('token');\n  }\n}\n\nfunction getToken() {\n  let token = localStorage.getItem('token');\n  if (token) {\n    // Check if expired, remove if it is\n    // atob is a function that decodes a base-64 string\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction removeToken() {\n  localStorage.removeItem('token');\n}\n\nconst tokenService = {\n  setToken,\n  getToken,\n  removeToken,\n  getUserFromToken\n};\n\nexport default tokenService;","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\nfunction getProfile(username){\n  console.log('getProfile calling')\n  return fetch(BASE_URL + username, {\n    headers: {\n      Authorization: \"Bearer \" + tokenService.getToken(), // <- since this will be called when we're logged in, send over the jwt token\n      // so the server knows who's making the request from the client\n    }\n  }).then(res => {\n    // This function happens when the browser recieves a response from the express server\n    if(res.ok) return res.json();\n    throw new Error('Error from getProfile Request, check the server terminal!')\n  })\n}\n\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    // by default the browser will detect the content of the fetch, and see that it is multipart/formdata\n    // so you don't have to set the headers, please make you don't JSON.stringigy the \n    // body, becuase it is already formData, which is what type we're sending over\n\n    // If you are sending a file/photo over\n    // what do datatype do you need to change this too?\n    body: user // <-- formData from the signup page userService.signup(formData)\n  }) // <- this code and above is what makes the request to the server\n  .then(res => {\n    // Inside the .then, is the response from the server!\n    if (res.ok) return res.json();\n    // if we get any response from the server that isn't in 200's \n    // we throw an error, to inform the client (You still have to look at the server terminal)\n    // to figure why you aren't getting a good response (Aka your server is broke)\n    // Probably a duplicate email\n\n    // TODO\n    // Figure out how to see what the error message is from the server, \n    // and make the throw error more dynamic, Example, Hey you forgot to upload\n    // an image!\n\n\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.error)\n    })\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  }) // <- the request to the server!\n  .then(res => {\n    // response from the server!\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.error)\n    })\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nconst userService = {\n  signup, \n  getUser,\n  logout,\n  login,\n  getProfile\n};\n\nexport default userService;","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport { Button, Form, Grid, Header, Image, Message, Segment } from \"semantic-ui-react\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate, Link } from \"react-router-dom\";\n\n// Utility functions that don't pertain to the component can \n// be defined outside it\n\nfunction isPasswordMatch(passwordOne, passwordConf) {\n  return passwordOne === passwordConf;\n}\n\nexport default function SignUpPage(props) {\n  const [error, setError] = useState({\n    message: '',\n    passwordError: false\n  });\n\n  const [state, setState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConf: \"\",\n  });\n\n  const [selectedFile, setSelectedFile] = useState(\"\");\n\n  // initialized the react router hook, which allows you to programatically\n  // change routes, aka after our signup call in the handleSubmit\n  const navigate = useNavigate();\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault(); // this stop the browser from submitting the form!\n\n    if (!isPasswordMatch(state.password, state.passwordConf)) return setError({ message: 'Passwords Must Match!', passwordError: true });\n    setError({ message: '', passwordError: false })\n    // Create formData, so we can send over our file, using multipart/formdata header\n    // which sends over the basic inputs, and then the file\n\n    const formData = new FormData(); //< - this constructor from the browser allows us to create data\n    // now we can set key value pairs on the formData\n    formData.append(\"photo\", selectedFile);\n    // Line by line tactic\n    // formData.append('username', state.username);\n    // formData.append('email', state.email);\n    // and so on for the rest or our state\n\n    // A more robust way to generate the rest of the formData is using a loop!\n    // loop over our state object using a for ... in loop\n    for (let key in state) {\n      formData.append(key, state[key]);\n    }\n\n    console.log(\n      formData,\n      \" <- form Data, you cant see this!\",\n      \"you have to loop over it\"\n    );\n    console.log(\n      formData.forEach((item) => console.log(item)),\n      \" < This lets you see the key values in formData\"\n    );\n\n    try {\n      await userService.signup(formData);\n      props.handleSignUpOrLogin();\n      navigate(\"/\");\n    } catch (err) {\n      console.log(err);\n      setError({ message: err.message, passwordError: false });\n    }\n  }\n\n  function handleFileInput(e) {\n    console.log(e.target.files, \" < - this is e.target.files!\");\n    setSelectedFile(e.target.files[0]);\n  }\n\n  return (\n    <Grid\n      textAlign=\"center\"\n      style={{ height: \"100vh\", width: \"100vw\" }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n          <Image src=\"https://cdn-icons-png.flaticon.com/512/744/744502.png\" /> Sign Up\n        </Header>\n        <Form onSubmit={handleSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"username\"\n              placeholder=\"username\"\n              value={state.username}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"email\"\n              value={state.email}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              error={error.passwordError}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"password\"\n              value={state.password}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              error={error.passwordError}\n              name=\"passwordConf\"\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={state.passwordConf}\n              onChange={handleChange}\n              required\n            />\n            <Form.Field>\n              <Form.Input\n                type=\"file\"\n                name=\"photo\"\n                placeholder=\"upload image\"\n                onChange={handleFileInput}\n              />\n            </Form.Field>\n            <Button color=\"blue\"\n              fluid\n              size=\"large\"\n              type=\"submit\"\n              className=\"btn\">\n              Sign up\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          Already have an account? <Link to=\"/login\">Log In</Link>\n        </Message>\n        {error.message ? <ErrorMessage error={error.message} /> : null}\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { Button, Form, Grid, Header, Image, Message, Segment } from \"semantic-ui-react\";\n\nexport default function LoginPage(props) {\n  const [error, setError] = useState(\"\");\n  const [state, setState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      await userService.login(state);\n      // Route to wherever you want!\n      props.handleSignUpOrLogin();\n      navigate(\"/\");\n    } catch (err) {\n      // Invalid user data (probably duplicate email)\n      // this is from the throw block in the userService.login first then function\n      setError(err.message);\n    }\n  }\n\n  return (\n    <Grid\n      textAlign=\"center\"\n      style={{ height: \"100vh\", width: \"100vw\" }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n          <Image src=\"https://cdn-icons-png.flaticon.com/512/744/744502.png\" /> Log in\n        </Header>\n        <Form onSubmit={handleSubmit}>\n          <Segment stacked>\n            <Form.Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"email\"\n              value={state.email}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"password\"\n              value={state.password}\n              onChange={handleChange}\n              required\n            />\n            <Button\n              color=\"blue\"\n              fluid\n              size=\"large\"\n              type=\"submit\"\n              className=\"btn\"\n            >\n              Log in\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          New to us? <Link to=\"/signup\">Create your account</Link>\n        </Message>\n        {error ? <ErrorMessage error={error} /> : null}\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Header, Segment, Image, Icon} from 'semantic-ui-react';\n\nexport default function PageHeader({ loggedUser, handleLogout }) {\n    console.log(loggedUser, \"loggedUser in pageheader\");\n    return (\n        <Segment clearing>\n            <Header as=\"h3\" color='red' floated=\"right\">\n                <Link to=\"/\">\n                    <Icon name=\"home\"></Icon>\n                </Link>\n                <Link to=\"/login\" onClick={handleLogout}>\n                    Log Out\n                </Link>\n            </Header>\n            <Header as=\"h3\" color='blue' floated=\"left\">\n                <Link to={`/${loggedUser?.username}`}>\n                    <Image\n                        src={\n                            loggedUser?.photoUrl\n                                ? loggedUser?.photoUrl\n                                : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n                        }\n                        avatar\n                    ></Image>\n                </Link>\n                <span>Welcome, {loggedUser.username} </span>\n            </Header>\n        </Segment>\n    )\n}","import React, { useState } from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\n\n\nexport default function AddLog(props) {\n    // create the state, pay attention to how the inputs are setup!\n    const [state, setState] = useState({\n        journal: \"\",\n    });\n    // The function that handles the changes on the input, Look at the inputs for the name of it\n    const [selectedFile, setSelectedFile] = useState(\"\");\n\n    function handleFileInput(e) {\n        console.log(e.target.files, \" < - this is e.target.files\");\n        setSelectedFile(e.target.files[0]);\n    }\n\n    function handleChange(e) {\n        setState({\n            journal: e.target.value,\n        });\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.append(\"photo\", selectedFile);\n        formData.append(\"journal\", state.journal);\n        props.handleAddPost(formData); // formData is the data we want to send to the server!\n    }\n\n    return (\n        <Segment>\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Form.Input\n                    className=\"form-control\"\n                    name=\"journal\"\n                    value={state.journal}\n                    placeholder=\"Write anything about your trip\"\n                    onChange={handleChange}\n                    required\n                />\n                <Form.Input\n                    className=\"form-control\"\n                    type=\"file\"\n                    name=\"photo\"\n                    placeholder=\"upload image\"\n                    onChange={handleFileInput}\n                />\n                <Button\n                    color=\"blue\"\n                    fluid\n                    size=\"large\"\n                    type=\"submit\"\n                    className=\"btn\"\n                >\n                    Add a trip\n                </Button>\n            </Form>\n        </Segment>\n    )\n}","import React from 'react';\nimport { Card, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function LogCard({ log, isProfile, loggedUser }) {\n    return (\n        <Card key={log._id} raised>\n            {isProfile ? (\n                \"\"\n            ) : (\n                <Card.Content textAlign=\"left\">\n                    <Card.Header>\n                        <Link to={`/${log.user.username}`}>\n                            <Image\n                                size=\"large\"\n                                avatar\n                                src={\n                                    log.user.photoUrl\n                                        ? log.user.photoUrl\n                                        : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n                                }\n                            />\n                            {log.user.username}\n                        </Link>\n                    </Card.Header>\n                </Card.Content>\n            )}\n            <Image src={`${log?.photoUrl}`} wrapped ui={false} />\n            <Card.Content>\n                <Card.Description>{log.journal}</Card.Description>\n            </Card.Content>\n        </Card>\n    );\n}","import { Loader } from 'semantic-ui-react'\n\nexport default function Loading() {\n    return (\n        <Loader size=\"medium\" active>\n            Loading\n        </Loader>\n    );\n}","import React from 'react';\nimport { Card, Dimmer, Segment, Image } from 'semantic-ui-react'\nimport LogCard from '../LogCard/LogCard';\nimport Loader from '../Loader/Loader';\n\nexport default function LogGallery({ logs, numPhotosCol, isProfile, loading, loggedUser }) {\n    return (\n        <Card.Group itemsPerRow={numPhotosCol} stackable>\n            {loading ? (\n                <Segment>\n                    <Dimmer active inverted>\n                        <Loader size=\"medium\">Loading</Loader>\n                    </Dimmer>\n                    <Image src=\"https://react.semantic-ui.com/images/wireframe/short-paragraph.png\" />\n                </Segment>\n            ) : null}\n            {logs.map((log) => {\n                return (\n                    <LogCard\n                        log={log}\n                        key={log._id}\n                        isProfile={isProfile}\n                        loggedUser={loggedUser}\n                    />\n                );\n            })}\n        </Card.Group>\n    )\n}\n","import tokenService from \"./tokenService\";\n\nconst BASE_URL = \"/api/logs\";\n\nexport function create(log) {\n    return fetch(BASE_URL, {\n        method: \"POST\",\n        body: log,\n        headers: {\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response);\n            throw new Error(response.err)\n        })\n    });\n}\n\nexport function getAll() {\n    return fetch(BASE_URL, {\n        headers: {\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    })\n        .then((res) => {\n            if (res.ok) return res.json();\n            return res.json().then(response => {\n                console.log(response)\n                throw new Error(response.err)\n            })\n        });\n}","import React, { useState, useEffect } from \"react\";\nimport PageHeader from \"../../components/Header/Header\";\nimport AddLog from \"../../components/AddLog/AddLog\";\nimport LogGallery from \"../../components/LogGallery/LogGallery\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport Loading from \"../../components/Loader/Loader\";\nimport { Grid } from \"semantic-ui-react\";\nimport * as logsAPI from \"../../utils/logApi\";\n\nexport default function Feed({ loggedUser, handleLogout }) {\n    const [logs, setLogs] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    async function handleAddLog(log) {\n        // log, is coming from the addlogForm component, when we call this function onSubmit props.handleAddlog(formData)\n        try {\n            setLoading(true);\n            const response = await logsAPI.create(log); // waiting for the json to be return from the server and parsed by us!\n            // data is the response from the api, the result of the .then if(res.ok) return res.json() in the create logAPI utils function\n            console.log(response);\n            setLogs([response.data, ...logs]); /// ...logs would keep all the logs in the previous states array\n            setLoading(false);\n        } catch (err) {\n            console.log(err.message);\n            setError(\"Error creating log, please try again\");\n        }\n    }\n\n    async function getLogs() {\n        try {\n            const response = await logsAPI.getAll();\n            console.log(response, \" data\");\n            setLogs([...response.data]);\n            setLoading(false);\n        } catch (err) {\n            console.log(err.message, \" this is the error\");\n            setLoading(false);\n        }\n    }\n    \n    useEffect(() => {\n        //Getting logs, C(R)UD\n        getLogs();\n    }, []); // This is useEffect runs once when the Feed component loads\n\n    if (error) {\n        return (\n            <>\n                <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n                <ErrorMessage error={error} />;\n            </>\n        );\n    }\n    if (loading) {\n        return (\n            <>\n                <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n                <Loading />\n            </>\n        );\n    }\n    return (\n        <Grid centered>\n            <Grid.Row>\n                <Grid.Column>\n                    <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column style={{ maxWidth: 600 }}>\n                    <AddLog handleAddLog={handleAddLog} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column style={{ maxWidth: 600 }}>\n                    <LogGallery\n                        logs={logs}\n                        numPhotosCol={1}\n                        isProfile={false}\n                        loading={loading}\n                        loggedUser={loggedUser}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}","import { Image, Grid, Segment } from \"semantic-ui-react\";\n\nexport default function Profile({ user }) {\n    return (\n        <Grid textAlign=\"center\" columns={2}>\n            <Grid.Row>\n                <Grid.Column>\n                    <Image\n                        src={`${user.photoUrl\n                                ? user.photoUrl\n                                : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n                            } `}\n                        avatar\n                        size=\"small\"\n                    />\n                </Grid.Column>\n                <Grid.Column textAlign=\"left\" style={{ maxWidth: 600 }}>\n                    <Segment vertical>\n                        <h4>{user.username}</h4>\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport Profile from \"../../components/Profile/Profile\";\nimport LogGallery from \"../../components/LogGallery/LogGallery\";\nimport Header from \"../../components/Header/Header\";\nimport Loading from \"../../components/Loader/Loader\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function ProfilePage({ loggedUser, handleLogout }) {\n    const [logs, setLogs] = useState([]);\n    const [profileUser, setProfileUser] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const { username } = useParams(); // username is defined in the App folder in the Router path=\"/:username\"\n\n\n    const getProfile = useCallback(async () => {\n        try {\n            const response = await userService.getProfile(username); // this line evaluates to what the server responds to the request with\n            // after we get the response to the server\n            // so lets flip the loading state\n            setLoading(false);\n            setProfileUser(response.data.user);\n            setLogs(response.data.posts);\n            console.log(response);\n        } catch (err) {\n            console.log(err.message);\n            setError(\"Profile does not exist! You are in the wrong in place\"); \n        }\n    }, [username]);\n\n    useEffect(() => {\n        console.log(\"firing!\");\n        getProfile();\n    }, [username, getProfile]);\n\n    if (error) {\n        return (\n            <>\n                <Header handleLogout={handleLogout} loggedUser={loggedUser} />\n                <ErrorMessage error={error} />;\n            </>\n        );\n    }\n\n    if (loading) {\n        return (\n            <>\n                <Header handleLogout={handleLogout} loggedUser={loggedUser} />\n                <Loading />\n            </>\n        );\n    }\n\n    return (\n        <Grid>\n            <Grid.Row>\n                <Grid.Column>\n                    <Header handleLogout={handleLogout} loggedUser={loggedUser} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column>\n                    <Profile user={profileUser} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered>\n                <Grid.Column style={{ maxWidth: 900 }}>\n                    <LogGallery\n                        logs={logs}\n                        numPhotosCol={3}\n                        isProfile={true}\n                        loading={loading}\n                        loggedUser={loggedUser}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport Feed from \"../Feed/Feed\";\nimport ProfilePage from \"../Profile/Profile\";\nimport userService from \"../../utils/userService\";\n\nexport default function App() {\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser(null);\n  }\n\n  if (user) {\n    return (\n      <Routes>\n        <Route path=\"/\" element={<Feed loggedUser={user} handleLogout={handleLogout} />} />\n        <Route\n          path=\"/login\"\n          element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/signup\"\n          element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/:username\"\n          element={<ProfilePage loggedUser={user} handleLogout={handleLogout} />}\n        />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route\n        path=\"/login\"\n        element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route\n        path=\"/signup\"\n        element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route path=\"/*\" element={<Navigate to=\"/login\" />} />\n    </Routes>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}